-- https://projecteuler.net/problem=44
--
-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
--    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are
-- pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

import qualified Data.Map.Lazy as Map

pentagonals :: Integer -> Map.Map Integer Bool
pentagonals maxx = Map.fromList [(quot (n * ((3 * n) - 1)) 2, True) | n <- [1..maxx]]

differences :: [Integer] -> (Integer -> Bool)  -> [Integer]
differences [] _ = []
differences pnts isPentagonal =
  let
    first = head pnts
    diffsAndSums = zip (map (\n -> n - first) (tail pnts)) (map (\n -> n + first) (tail pnts))
    matching = filter (\t -> isPentagonal (fst t) && isPentagonal (snd t)) diffsAndSums
  in (map fst matching) ++ (differences (tail pnts) isPentagonal)

isInMap :: Map.Map Integer Bool -> Integer -> Bool
isInMap dict number = case Map.lookup number dict of
        Just n -> n
        Nothing -> False

minimalDiff :: Integer -> Integer
minimalDiff numberOfPentagonals = minimum (differences (Map.keys pnts) (isInMap pnts))
  where pnts = pentagonals numberOfPentagonals

main :: IO ()
main = print ("Expected: " ++ show (5482660 :: Integer) ++ ", actual: " ++ show (minimalDiff 5000))
