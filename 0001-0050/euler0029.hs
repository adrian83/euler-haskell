-- https://projecteuler.net/problem=29
--
-- Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
-- 22=4, 23=8, 24=16, 25=32
-- 32=9, 33=27, 34=81, 35=243
-- 42=16, 43=64, 44=256, 45=1024
-- 52=25, 53=125, 54=625, 55=3125
-- If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
--    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
-- How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?


import Data.List

powers :: Integer -> Integer -> [Integer]
powers number maxExponent = if maxExponent == 2 then [number^(2::Integer)] else number^maxExponent : powers number (maxExponent-1)

allPowers :: Integer -> Integer -> [Integer]
allPowers maxNumber maxExponent = if maxNumber == 2 then powers maxNumber maxExponent else powers maxNumber maxExponent ++ allPowers (maxNumber-1) maxExponent

removeDuplicates :: [Integer] -> [Integer]
removeDuplicates [a] = [a]
removeDuplicates l =
  let
    f = head l
    t = tail l
  in
    if f == head t then removeDuplicates (f : tail t) else f : removeDuplicates t

main :: IO ()
main = print ("Result should be: " ++ show (9183 :: Integer) ++ ", is: " ++ show (length $ removeDuplicates $ sort $ allPowers 100 100))
