-- https://projecteuler.net/problem=45
--
-- Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
--
-- Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
-- Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
-- Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
-- It can be verified that T285 = P165 = H143 = 40755.
-- Find the next triangle number that is also pentagonal and hexagonal.

triangle :: Integer -> Integer
triangle n = quot (n * (n + 1)) 2

pentagonal :: Integer -> Integer
pentagonal n = quot (n * (3 * n - 1)) 2

hexagonal :: Integer -> Integer
hexagonal n = n * (2 * n - 1)

nextState :: (Integer -> Integer) -> (Integer, Integer) -> (Integer, Integer)
nextState f prevState = (fst prevState + 1, f (fst prevState + 1))

stateUntil :: (Integer, Integer) -> ((Integer, Integer) -> (Integer, Integer)) -> (Integer -> Bool) -> (Integer, Integer)
stateUntil curState stateGen stopF =
  if (stopF (snd curState)) then curState
  else (if (stopF (snd (stateGen curState))) then stateGen curState else stateUntil (stateGen curState) stateGen stopF)

trianglesThatArePentagonalAndHexagonal :: Integer -> [Integer] -> [Integer] -> [Integer] -> [Integer]
trianglesThatArePentagonalAndHexagonal index tr pe he =
  let t = triangle index
      p = pentagonal index
      h = hexagonal index
      newHe = h : he
      newPe = p : pe
  in if elem t newPe && elem t newHe
    then t : (trianglesThatArePentagonalAndHexagonal (index+1) (t : tr) newPe newHe)
    else trianglesThatArePentagonalAndHexagonal (index+1) (t : tr) newPe newHe


main :: IO ()
main = print ("Expected: " ++ show (1533776805 :: Integer) ++ ", actual: " ++ show ((trianglesThatArePentagonalAndHexagonal 1 [] [] []) !! 2))
